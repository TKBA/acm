#include <iostream>
#include <cstdio>
#include <cstring>

using namespace std;
/// 深入理解指针

struct ListNode {
    int m_nValue;
    ListNode* m_pNext;
};

void AddToTail(ListNode* pHead, int value) {
    ListNode* pNew = new ListNode();
    pNew->m_nValue = value;
    pNew->m_pNext = NULL;

    if (pHead == NULL) {
        pHead = pNew;
        printf("pHead = %d\n", pHead);
        printf("pHead->value = %d\n", pHead->m_nValue);
        printf("pNew->value = %d\n", pNew->m_nValue);
    } else {
        ListNode* pNode = pHead;
        while (pNode->m_pNext != NULL) {
            pNode = pNode->m_pNext;
        }
        pNode->m_pNext = pNew;
    }
}

void print(ListNode* pHead) {
    ListNode* pNode = pHead;
    printf("sz = %d\n", sizeof(pHead));

    while (pNode != NULL) {
        printf("%d ", pNode->m_nValue);
        pNode = pNode->m_pNext;
    }
    printf("\n");
}

int main()
{
    ListNode s;
    ListNode* a = NULL;

    for (int i = 0; i < 10; i++) {
        AddToTail(a, i+1);
        /// 因为在此处 a 相当于函数的形式参数， 并且等价于是值传递
        /// 所以 a 一直为空, 可以把指针和普通变量同等看待， 只不过
        /// 指针存储的是地址。
        /// 例如本程序， 调用 AddToTail(a, i+1); 时会申请一个NodeList* 的 pHead临时变量
        /// 且 pHead    存储的地址与 a 存储的地址一样。和值传递一样, 在函数内改变 pHead
        /// 不会改变 a 的值

        printf("a = %d\n", a);
    }
    print(a);
    return 0;
}

